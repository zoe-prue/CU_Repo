install.packages("BiocConductor")
BiocManager::install("GenomicRanges")
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
# Check versions for reproducibility
sessionInfo()
# Check if packages can be updated
valid()
library(tidyr)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(ggbreak)
library(ggforce)
setwd("~/Desktop/CU_coding/qPCR/code")
# this script has functions that are usable for any qPCR analysis
source("my_qPCR_functions_v2.R")
setwd("~/Desktop/CU_coding/qPCR/raw_data")
# (CHANGE THESE TO SUIT YOUR NEEDS)
# make sure your qPCR_data and your R scripts are in the same folder (directory)
# and that this is set as your working directory
skip_meta = 20 # number of metadata rows to skip
qpcr_data <- read.csv("~/Desktop/CU_coding/qPCR/raw_data/Exp13_5.3.24_u4cs_copy_20240503_114213_Results_20240503 131638.csv",
skip = skip_meta,
stringsAsFactors = FALSE) # put in path to YOUR data
setwd("~/Desktop/CU_coding/qPCR/code/Exp 13")
# Single Graph -------------------------------
# you're welcome to just make one plot and change it up each time!
# here is some simple code to make one plot
# Local variables:
probe = "IFI27" # list of probes of interest
reference = "JAK1" # probe that you're "normalizing" to
ctrl_sample = "pTRIP JAK1 WT" # sample you're making everything "relative" to
plot_title = " mRNA"
fill_color = "#DC267F"
# data pre-processing - averaging technical replicates
# Group the data by the "Target" column and calculate the mean Cq for each group
qpcr_data$Cq <- as.numeric(qpcr_data$Cq)
avg_cq_values <- qpcr_data %>%
group_by(Sample, Target, Well.Position) %>%
summarize(Cq = mean(Cq, na.rm = TRUE))
# select only columns from qpcr_data that are needed and ensure that values are class numeric
tidy_qpcr_data <- qpcr_data %>%
filter(Target != is.na(Target) & Target != "") %>%
select(Well.Position, Sample, Target, Cq) %>%
group_by(Well.Position) %>%
mutate(Cq = as.numeric(Cq))
# create a data table with only Cq values from target being tested (e.g. JAK1)
test_data <- tidy_qpcr_data %>%
filter(Target == probe)
# create a data table with only Cq values from housekeeping gene (e.g. GAPDH)
ref_data <- tidy_qpcr_data %>%
filter(Target == reference) %>%
rename("ref_target" = Target) %>%
rename("ref_Cq" = Cq)
# Group by Sample and calculate the average Cq
test_data <- test_data %>%
group_by(Sample, Target) %>%
summarize(Cq = mean(Cq))
# Group by Sample and calculate the average Cq
ref_data <- ref_data %>%
group_by(Sample, ref_target) %>%
summarize(ref_Cq = mean(ref_Cq))
# join the test_data and ref_data data frames and form a new column with the calculated delta_cq for each well
delta_cq_data <- inner_join(test_data,
ref_data,
join_by("Sample"),
relationship = "one-to-one") %>%
group_by(Sample) %>%
mutate(delta_Cq = Cq - ref_Cq)
# Filter data for "pTRIP JAK1 WT" samples
pTRIP_JAK1_WT <- delta_cq_data %>%
filter(grepl("pTRIP JAK1 WT", Sample)) ####CHANGE THIS each time
# Calculate average delta_Cq
average_delta_Cq_ref <- mean(pTRIP_JAK1_WT$delta_Cq)
# Remove numbers at the end of Sample names
pTRIP_JAK1_WT$Sample <- gsub("\\s[0-9]+$", "", pTRIP_JAK1_WT$Sample)
# Output the vector of average delta_Cq
average_delta_Cq_ref
# subtract mean delta_cq for your ctrl_sample from all delta_cq values
delta_delta_cq_data <- delta_cq_data %>%
mutate(delta_delta_cq = delta_Cq - average_delta_Cq_ref)
# find the relative concentrations of the target being tested for every sample
rel_conc_data <- delta_delta_cq_data %>%
mutate(rel_conc = 2^(-(delta_delta_cq)))
rel_conc_data <- rel_conc_data %>%
filter(Sample != "pTRIP Luciferase 1") %>%
filter(Sample != "pTRIP Luciferase 2") %>%
filter(Sample != "pTRIP Luciferase 3")
graph_rel_conc <- function(rel_conc_data, fill_color, probe) {
# Filter out rows with NA values in 'rel_conc'
rel_conc_data <- rel_conc_data[complete.cases(rel_conc_data$rel_conc), ]
# Extract group names without numbers at the end
rel_conc_data$group <- gsub("\\s[0-9]+$", "", rel_conc_data$Sample)
# Aggregate data to calculate mean and standard deviation for each group of three points
graphable_data <- rel_conc_data %>%
group_by(group) %>%
summarise(mean_rel_conc = mean(rel_conc),
sde_rel_conc = sd(rel_conc) / sqrt(n()))
# Make a bar graph of your rel_conc_data with error bars and data points
rel_conc_bar <- ggplot(graphable_data, aes(x = group, y = mean_rel_conc)) +
theme_classic() +
geom_bar(stat = "identity", fill = fill_color, width = 0.5, color = "black") +
geom_errorbar(aes(ymin = mean_rel_conc - sde_rel_conc, ymax = mean_rel_conc + sde_rel_conc),
width = 0.2, position = position_dodge(width = 0.5)) +
geom_point(data = rel_conc_data, aes(x = group, y = rel_conc), position = position_jitter(width = 0.2), alpha = 0.8, color = "black", size = 1) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1,), axis.title.x = element_blank(), plot.title=element_text(hjust=0.5)) +
xlab("JAK1") +
scale_y_continuous(trans = "log10") +
ylab(paste0(probe, "/", reference, " Relative Units")) +
theme(plot.title = element_text(size = 16),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14))
return(rel_conc_bar)
}
# one graph with Path #1:
# rel_conc_data <- rel_conc_p1(avg_cq_values, probe, reference, ctrl_sample)
rel_conc_bar <- graph_rel_conc(rel_conc_data, fill_color, probe) + ggtitle(paste0(probe, plot_title))
rel_conc_bar
desired_order=(c("pTRIP JAK1 WT",
"pTRIP JAK1 S703I",
"pTRIP JAK1 R826C"))
rel_conc_bar_order <- rel_conc_bar +
scale_x_discrete(labels = c(
"pTRIP JAK1 WT" = "WT",
"pTRIP JAK1 S703I" = "S703I",
"pTRIP JAK1 R826C" = "R826C"),
limits = desired_order
) +
# scale_y_break(c(10, 30)) +
theme(axis.text.x = element_text(size = 14)) +
geom_hline(yintercept = 1, linetype = 'dashed', color = 'black') +  # Add dotted line
geom_hline(yintercept = 1.1518898, linetype = 'dashed', color = 'black')  # Add dotted line
rel_conc_bar_order
View(rel_conc_bar)
View(rel_conc_data)
rel_conc_bar_order <- rel_conc_bar +
scale_x_discrete(labels = c(
"pTRIP JAK1 WT" = "WT",
"pTRIP JAK1 S703I" = "S703I",
"pTRIP JAK1 R826C" = "R826C"),
limits = desired_order
) +
# scale_y_break(c(10, 30)) +
theme(axis.text.x = element_text(size = 14)) +
geom_hline(yintercept = 1, linetype = 'dashed', color = 'black') +  # Add dotted line
geom_hline(yintercept = 1.1518898, linetype = 'dashed', color = 'black') +  # Add dotted line
geom_hline(yintercept = 12.16896803, linetype = 'dashed', color = 'black')  # Add dotted line
rel_conc_bar_order
rel_conc_bar_order + geom_text(aes(x = 5.5, y = 5, label = "Horizontal Line Label"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order <- rel_conc_bar +
scale_x_discrete(labels = c(
"pTRIP JAK1 WT" = "WT",
"pTRIP JAK1 S703I" = "S703I",
"pTRIP JAK1 R826C" = "R826C"),
limits = desired_order
) +
# scale_y_break(c(10, 30)) +
theme(axis.text.x = element_text(size = 14)) +
geom_hline(yintercept = 1, linetype = 'dashed', color = 'black') +  # Add dotted line
geom_hline(yintercept = 1.1518898, linetype = 'dashed', color = 'black') +  # Add dotted line
geom_hline(yintercept = 12.16896803, linetype = 'dashed', color = 'black')  # Add dotted line
rel_conc_bar_order
rel_conc_bar_order + geom_text(aes(x = 1, y = 1.1518898, label = "Mild GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 1, y = 1.5, label = "Mild GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 1, y = 1.2, label = "Mild GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.5, y = 1.2, label = "Mild GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Mild GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 12.2, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 12.25, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 12.3, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 12.35, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 12.4, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 12.4, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 12.5, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0) +
geom_text(aes(x = 0.2, y = 12.5, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0) +
geom_text(aes(x = 0.1, y = 12.5, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0) +
geom_text(aes(x = 0.2, y = 12.5, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.1, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0) +
geom_text(aes(x = 0.2, y = 12.5, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0) +
geom_text(aes(x = 0.2, y = 12.5, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
# Single Graph -------------------------------
# you're welcome to just make one plot and change it up each time!
# here is some simple code to make one plot
# Local variables:
probe = "MX1" # list of probes of interest
reference = "JAK1" # probe that you're "normalizing" to
ctrl_sample = "pTRIP JAK1 WT" # sample you're making everything "relative" to
plot_title = " mRNA"
fill_color = "#FE6100"
# data pre-processing - averaging technical replicates
# Group the data by the "Target" column and calculate the mean Cq for each group
qpcr_data$Cq <- as.numeric(qpcr_data$Cq)
avg_cq_values <- qpcr_data %>%
group_by(Sample, Target, Well.Position) %>%
summarize(Cq = mean(Cq, na.rm = TRUE))
# select only columns from qpcr_data that are needed and ensure that values are class numeric
tidy_qpcr_data <- qpcr_data %>%
filter(Target != is.na(Target) & Target != "") %>%
select(Well.Position, Sample, Target, Cq) %>%
group_by(Well.Position) %>%
mutate(Cq = as.numeric(Cq))
# create a data table with only Cq values from target being tested (e.g. JAK1)
test_data <- tidy_qpcr_data %>%
filter(Target == probe)
# create a data table with only Cq values from housekeeping gene (e.g. GAPDH)
ref_data <- tidy_qpcr_data %>%
filter(Target == reference) %>%
rename("ref_target" = Target) %>%
rename("ref_Cq" = Cq)
# Group by Sample and calculate the average Cq
test_data <- test_data %>%
group_by(Sample, Target) %>%
summarize(Cq = mean(Cq))
# Group by Sample and calculate the average Cq
ref_data <- ref_data %>%
group_by(Sample, ref_target) %>%
summarize(ref_Cq = mean(ref_Cq))
# join the test_data and ref_data data frames and form a new column with the calculated delta_cq for each well
delta_cq_data <- inner_join(test_data,
ref_data,
join_by("Sample"),
relationship = "one-to-one") %>%
group_by(Sample) %>%
mutate(delta_Cq = Cq - ref_Cq)
# Filter data for "pTRIP JAK1 WT" samples
pTRIP_JAK1_WT <- delta_cq_data %>%
filter(grepl("pTRIP JAK1 WT", Sample)) ####CHANGE THIS each time
# Calculate average delta_Cq
average_delta_Cq_ref <- mean(pTRIP_JAK1_WT$delta_Cq)
# Remove numbers at the end of Sample names
pTRIP_JAK1_WT$Sample <- gsub("\\s[0-9]+$", "", pTRIP_JAK1_WT$Sample)
# Output the vector of average delta_Cq
average_delta_Cq_ref
# subtract mean delta_cq for your ctrl_sample from all delta_cq values
delta_delta_cq_data <- delta_cq_data %>%
mutate(delta_delta_cq = delta_Cq - average_delta_Cq_ref)
# find the relative concentrations of the target being tested for every sample
rel_conc_data <- delta_delta_cq_data %>%
mutate(rel_conc = 2^(-(delta_delta_cq)))
rel_conc_data <- rel_conc_data %>%
filter(Sample != "pTRIP Luciferase 1") %>%
filter(Sample != "pTRIP Luciferase 2") %>%
filter(Sample != "pTRIP Luciferase 3")
graph_rel_conc <- function(rel_conc_data, fill_color, probe) {
# Filter out rows with NA values in 'rel_conc'
rel_conc_data <- rel_conc_data[complete.cases(rel_conc_data$rel_conc), ]
# Extract group names without numbers at the end
rel_conc_data$group <- gsub("\\s[0-9]+$", "", rel_conc_data$Sample)
# Aggregate data to calculate mean and standard deviation for each group of three points
graphable_data <- rel_conc_data %>%
group_by(group) %>%
summarise(mean_rel_conc = mean(rel_conc),
sde_rel_conc = sd(rel_conc) / sqrt(n()))
# Make a bar graph of your rel_conc_data with error bars and data points
rel_conc_bar <- ggplot(graphable_data, aes(x = group, y = mean_rel_conc)) +
theme_classic() +
geom_bar(stat = "identity", fill = fill_color, width = 0.5, color = "black") +
geom_errorbar(aes(ymin = mean_rel_conc - sde_rel_conc, ymax = mean_rel_conc + sde_rel_conc),
width = 0.2, position = position_dodge(width = 0.5)) +
geom_point(data = rel_conc_data, aes(x = group, y = rel_conc), position = position_jitter(width = 0.2), alpha = 0.8, color = "black", size = 1) +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1,), axis.title.x = element_blank(), plot.title=element_text(hjust=0.5)) +
xlab("JAK1") +
scale_y_continuous(trans = "log10") +
ylab(paste0(probe, "/", reference, " Relative Units")) +
theme(plot.title = element_text(size = 16),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14))
return(rel_conc_bar)
}
# one graph with Path #1:
# rel_conc_data <- rel_conc_p1(avg_cq_values, probe, reference, ctrl_sample)
rel_conc_bar <- graph_rel_conc(rel_conc_data, fill_color, probe) + ggtitle(paste0(probe, plot_title))
rel_conc_bar
desired_order=(c("pTRIP JAK1 WT",
"pTRIP JAK1 S703I",
"pTRIP JAK1 R826C"))
rel_conc_bar_order <- rel_conc_bar +
scale_x_discrete(labels = c(
"pTRIP JAK1 WT" = "WT",
"pTRIP JAK1 S703I" = "S703I",
"pTRIP JAK1 R826C" = "R826C"),
limits = desired_order
) +
# scale_y_break(c(10, 30)) +
theme(axis.text.x = element_text(size = 14)) +
geom_hline(yintercept = 1, linetype = 'dashed', color = 'black') +  # Add dotted line
geom_hline(yintercept = 1.1518898, linetype = 'dashed', color = 'black') +  # Add dotted line
geom_hline(yintercept = 12.16896803, linetype = 'dashed', color = 'black')  # Add dotted line
rel_conc_bar_order
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0) +
geom_text(aes(x = 0.2, y = 12.5, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order <- rel_conc_bar +
scale_x_discrete(labels = c(
"pTRIP JAK1 WT" = "WT",
"pTRIP JAK1 S703I" = "S703I",
"pTRIP JAK1 R826C" = "R826C"),
limits = desired_order
) +
# scale_y_break(c(10, 30)) +
theme(axis.text.x = element_text(size = 14)) +
geom_hline(yintercept = 1, linetype = 'dashed', color = 'black') +  # Add dotted line
geom_hline(yintercept = 1.1518898, linetype = 'dashed', color = 'black') +  # Add dotted line
geom_hline(yintercept = 2.645185633, linetype = 'dashed', color = 'black')  # Add dotted line
rel_conc_bar_order
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0) +
geom_text(aes(x = 0.2, y = 12.5, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0) +
geom_text(aes(x = 0.2, y = 3, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
rel_conc_bar_order + geom_text(aes(x = 0.2, y = 1.2, label = "Lower Limit Mild GOF"),
hjust = -0.1, vjust = 0) +
geom_text(aes(x = 0.2, y = 2.7, label = "Upper Limit Strong GOF"),
hjust = -0.1, vjust = 0)
